// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/edtsoi/projects/jaeger-mongodb/internal/jaeger-mongodb/reader.go

// Package mock_jaeger_mongodb is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockReaderStorage is a mock of ReaderStorage interface.
type MockReaderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockReaderStorageMockRecorder
}

// MockReaderStorageMockRecorder is the mock recorder for MockReaderStorage.
type MockReaderStorageMockRecorder struct {
	mock *MockReaderStorage
}

// NewMockReaderStorage creates a new mock instance.
func NewMockReaderStorage(ctrl *gomock.Controller) *MockReaderStorage {
	mock := &MockReaderStorage{ctrl: ctrl}
	mock.recorder = &MockReaderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderStorage) EXPECT() *MockReaderStorageMockRecorder {
	return m.recorder
}

// Distinct mocks base method.
func (m *MockReaderStorage) Distinct(ctx context.Context, field string, filter interface{}, opts *options.DistinctOptions) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Distinct", ctx, field, filter, opts)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Distinct indicates an expected call of Distinct.
func (mr *MockReaderStorageMockRecorder) Distinct(ctx, field, filter, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockReaderStorage)(nil).Distinct), ctx, field, filter, opts)
}

// Find mocks base method.
func (m *MockReaderStorage) Find(ctx context.Context, filter interface{}, opts *options.FindOptions) (*mongo.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, filter, opts)
	ret0, _ := ret[0].(*mongo.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockReaderStorageMockRecorder) Find(ctx, filter, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockReaderStorage)(nil).Find), ctx, filter, opts)
}
